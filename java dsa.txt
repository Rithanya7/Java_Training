class Node{
    int data;
    Node next;
    Node(int data){
        this.data = data;
        this.next = null;
    }
}
class LinkedList{
    Node head,tail;
    public void insert(int data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
            tail = newNode;
        }
        else{
            tail.next = newNode;
            tail = newNode;
        }
    }
    public void insertatbegin(int data){
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
    public void specific(int pos,int data){
        Node newNode = new Node(data);
        Node temp = head;
        for(int i=0;i<pos-1;i++){
            temp = temp.next;
            newNode.next = temp.next;
            temp.next = newNode;
        }
    }
    public void deleteatbegin(){
        if(head != null){
            head = head.next;
        }
    }
    public void deleteatend(){
        Node temp = head;
        while(temp.next.next != null){
            temp = temp.next;
        }
        temp.next = null;
    }
    public void display(){
        Node temp = head;
        while(temp != null){
            System.out.println(temp.data);
            temp = temp.next;
        }
    }
}
public class Main{
    public static void main(String[] args){
        LinkedList link = new LinkedList();
        link.insert(100);
        link.insert(200);
        link.insert(300);
        link.insertatbegin(400);
        link.specific(2,600);
        link.deleteatbegin();
        link.deleteatend();
        link.display();
    }
}

reverse 
import java.util.*;
public class Main 
{
    static class SLLNode 
    {
        int data;
        SLLNode next;
        SLLNode(int data) 
        {
            this.data = data;
            this.next = null;
        }
    }
        static SLLNode insert_at_end(SLLNode head, int data) 
        {
            SLLNode newNode = new SLLNode(data);
            if (head == null) 
            {
                head = newNode;
            } 
            else 
            {
                SLLNode temp = head;
                while (temp.next != null) 
                {
                    temp = temp.next;
                }
                temp.next = newNode;
            }
            return head;
        }
        static void sll_display(SLLNode head)
      {
         SLLNode tptr;
         for(tptr=head;tptr!=null;tptr=tptr.next)
        {
            System.out.print(tptr.data+" ");
        }
      }

        static SLLNode sll_reverse(SLLNode head)
        {
         SLLNode prev = null;
         SLLNode current = head;
         SLLNode next = null;
         while(current != null){
           next = current.next;
           current.next = prev;
           prev = current;
           current = next;
         }
         head = prev;
         return head;
         }
            public static void main(String[] args) 
    {
        SLLNode head=null;
        Scanner scan = new Scanner(System.in);
        while(true)
        {
            int num=scan.nextInt();
            if(num==-1)
                break;
            head=insert_at_end(head,num);
        }
        head=sll_reverse(head);
        sll_display(head);
        scan.close();
    }
}

insert at begin
import java.util.*;
public class Main 
{
    static class SLLNode 
    {
        int data;
        SLLNode next;
        SLLNode(int data) 
        {
            this.data = data;
            this.next = null;
        }
    }
static SLLNode insert_at_begin(SLLNode head,int data) 
        {
                SLLNode newNode = new SLLNode(data);
                newNode.next = head;
                head = newNode;
                return head;
        }     
        static void sll_display(SLLNode head)
      {
         SLLNode tptr;
         for(tptr=head;tptr!=null;tptr=tptr.next)
        {
            System.out.print(tptr.data+" ");
        }
      }
    public static void main(String[] args) 
    {
        SLLNode head=null;
        Scanner scan = new Scanner(System.in);
        while(true)
        {
            int num=scan.nextInt();
            if(num==-1)
                break;
            head=insert_at_begin(head,num);
        }
        sll_display(head);
        scan.close();
    }
}


delete at end
import java.util.*;
public class Main 
{
    static class SLLNode 
    {
        int data;
        SLLNode next;
        SLLNode(int data) 
        {
            this.data = data;
            this.next = null;
        }
    }
        static SLLNode insert_at_end(SLLNode head, int data) 
        {
            SLLNode newNode = new SLLNode(data);
            if (head == null) 
            {
                head = newNode;
            } 
            else 
            {
                SLLNode temp = head;
                while (temp.next != null) 
                {
                    temp = temp.next;
                }
                temp.next = newNode;
            }
            return head;
        }
        static void sll_display(SLLNode head)
      {
         SLLNode tptr;
         for(tptr=head;tptr!=null;tptr=tptr.next)
        {
            System.out.print(tptr.data+" ");
        }
      }

         static SLLNode delete_at_end(SLLNode head)
        {
         SLLNode temp = head;
         while(temp.next.next != null){
           temp = temp.next;
         }
         temp.next = null;
         return head;
        }
            public static void main(String[] args) 
    {
        SLLNode head=null;
        Scanner scan = new Scanner(System.in);
        while(true)
        {
            int num=scan.nextInt();
            if(num==-1)
                break;
            head=insert_at_end(head,num);
        }
        head=delete_at_end(head);
        sll_display(head);
        scan.close();
    }
}

linked list
package practice;

class Node{
    int data;
    Node next;
    Node prev;
    Node(int data){
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}
class DLL{
    Node head,tail;
    public void Insertatbegin(int data){
        Node newNode = new Node(data);
        if(head == null){
            head = tail = newNode;
        }
        else{
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }
    public void insertatend(int data){
        Node newNode = new Node(data);
        if(tail == null){
            head = tail = newNode;
        }
        else{
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }
    public void specificpos(int pos, int data) {
        Node newNode = new Node(data);
        Node temp = head;
        if (pos == 1) {
            Insertatbegin(data);
            return;
        }
        for (int i = 1; temp != null && i < pos - 1; i++) {
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("Position out of bounds");
            return;
        }
        newNode.next = temp.next;
        newNode.prev = temp;
        if (temp.next != null) {
            temp.next.prev = newNode;
        }
        temp.next = newNode;
        if (newNode.next == null) {
            tail = newNode;
        }
    }
    public void deleteatbegin(){
        if(head == null){
            System.out.println("list is empty");
            return;
        }
        if(head == tail){
            head = tail = null;
        }
        else{
            head = head.next;
            head.prev = null;
        }
    }
    public void deleteatend() {
    	Node temp = head;
    	if(temp == null) {
    		System.out.println("list is empty");
    	}
    	while(temp.next.next != null) {
    		temp = temp.next;
    	}
    	temp.next = null;
    }
    public void reverse() {
    	Node prev = null;
    	Node current = head;
    	Node next = null;
    	while(current != null) {
    		next = current.next;
    		current.next = prev;
    		prev = current;
    		current = next;
    	}
    	head = prev;
    }
    public void display(){
        Node temp = head;
        if(temp == null){
          System.out.println("List is empty");  
        }
        while(temp != null){
            System.out.print(temp.data);
            if(temp.next != null){
                System.out.print("<->");
            }
            temp = temp.next;
        }
        System.out.println();
    }
}
public class Main{
    public static void main(String[] args){
        DLL doubly = new DLL();
        doubly.Insertatbegin(100);
        doubly.Insertatbegin(200);
        doubly.Insertatbegin(300);
        doubly.Insertatbegin(600);
        doubly.insertatend(400);
        doubly.insertatend(500);
        doubly.insertatend(700);
        doubly.specificpos(0,800);
        doubly.deleteatbegin();
        doubly.deleteatend();
        doubly.reverse();
        doubly.display();
    }
}

stack
package practice;

class stackarr{
	int a[] = new int[10];
	int top = -1;
	public void push(int data) {
		if(top == a.length-1) {
			System.out.println("stack is full");
		}
		else {
			top++;
			a[top] = data;
		}
	}
	public void pop() {
		if(top == -1) {
			System.out.println("stack is empty");
		}
		else {
			top--;
		}
	}
	public void peek() {
		if(top == -1) {
			System.out.println("statck is empty");
		}
		else {
			System.out.println("top of the element:"+a[top]);
		}
	}
	public void display() {
		for(int i=top;i>=0;i--) {
			System.out.println("display the elements"+a[i]);
		}
	}
}

public class stack {

	public static void main(String[] args) {
		stackarr s = new stackarr();
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
		s.push(60);
		s.push(70);
		s.push(80);
		s.push(90);
		s.push(100);
		s.pop();
		s.peek();
		s.display();
	}

}